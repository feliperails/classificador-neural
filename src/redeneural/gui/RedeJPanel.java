package redeneural.gui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import redeneural.mlp.Camada;
import redeneural.mlp.funcao.Funcao;
import redeneural.mlp.funcao.FuncaoSigmoide;
import redeneural.mlp.funcao.FuncaoTangenteHiperbolica;
import redeneural.model.Projeto;

/**
 *
 * @author Michael Murussi
 */
public class RedeJPanel extends javax.swing.JPanel {

    private List<Integer> camadas = new ArrayList<>();

    /** Creates new form RedeJPanel */
    public RedeJPanel() {
        initComponents();

        ajustaNumCamadas(((Integer) edtCamadas.getValue()).intValue() + 1);
    }

    public void setProjeto(Projeto projeto) {

        if (projeto.getRede() != null) {

            edtCamadas.setValue(projeto.getRede().getCamadas().length);
            this.camadas.clear();

            for (Camada c : projeto.getRede().getCamadas()) {
                this.camadas.add(c.getNeuronios().length);
            }
            
            tblRedeModel.fireTableDataChanged();

            Camada c = projeto.getRede().getCamadaSaida();
            if (c != null && c.getNeuronios() != null && c.getNeuronios().length > 0) {
                Funcao f = c.getNeuronios()[0].getFuncao();
                if (f instanceof FuncaoSigmoide) {
                    edtFuncao.setSelectedIndex(0);
                } else if (f instanceof FuncaoTangenteHiperbolica) {
                    edtFuncao.setSelectedIndex(1);
                }
            }
        }
    }

    private void ajustaNumCamadas(int numCamadas) {
        // ajusta a quantidade de camadas
        
        // + camadas
        for (int i = camadas.size(); i < numCamadas; i++) {
            camadas.add(0);
        }

        // - camadas
        for (int i = camadas.size(); i > numCamadas; i--) {
            camadas.remove(camadas.size() - 1);
        }

        tblRedeModel.fireTableDataChanged();
    }

    public int getFuncao() {
        return edtFuncao.getSelectedIndex();
    }

    public double getIntervaloInicial() {
        return ((Number) edtIntervaloInicial.getValue()).doubleValue();
    }

    public double getIntervaloFinal() {
        return ((Number) edtIntervaloFinal.getValue()).doubleValue();
    }

    public List<Integer> getCamadas() {
        return camadas;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        edtCamadas = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCamadas = new javax.swing.JTable();
        edtFuncao = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edtIntervaloInicial = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        edtIntervaloFinal = new javax.swing.JSpinner();

        setMinimumSize(new java.awt.Dimension(400, 360));

        jLabel1.setText("Camadas");

        edtCamadas.setModel(new javax.swing.SpinnerNumberModel(2, 1, 99, 1));
        edtCamadas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                edtCamadasStateChanged(evt);
            }
        });

        tblCamadas.setModel(tblRedeModel);
        tblCamadas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblCamadas);

        edtFuncao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sigmóide", "Tangente hiperbólica" }));

        jLabel11.setText("Função");

        jLabel2.setText("Pesos iniciais - intervalo valores aleatórios:");

        jLabel3.setText("Inicial");

        edtIntervaloInicial.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));

        jLabel4.setText("Final");

        edtIntervaloFinal.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), null, null, Double.valueOf(1.0d)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtCamadas, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtIntervaloInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtIntervaloFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(edtCamadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(edtFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(edtIntervaloFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtIntervaloInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(139, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void edtCamadasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_edtCamadasStateChanged
        // ajusta a quantidade de camadas
        int numCamadas = ((Integer) edtCamadas.getValue()).intValue();
        numCamadas++;

        ajustaNumCamadas(numCamadas);
    }//GEN-LAST:event_edtCamadasStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner edtCamadas;
    private javax.swing.JComboBox edtFuncao;
    private javax.swing.JSpinner edtIntervaloFinal;
    private javax.swing.JSpinner edtIntervaloInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCamadas;
    // End of variables declaration//GEN-END:variables

    private final AbstractTableModel tblRedeModel = new AbstractTableModel() {

        Class[] types = new Class[]{
            java.lang.Integer.class, java.lang.Integer.class
        };
        String[] columnName = new String[]{
          "Camada", "Nº Neurônios"
        };

        @Override
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return (columnIndex == 1);
        }

        @Override
        public String getColumnName(int column) {
            return columnName[column];
        }

        @Override
        public int getRowCount() {
            return camadas.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0)
                return rowIndex;
            else
                return camadas.get(rowIndex);
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if ((columnIndex == 1) && (aValue instanceof Integer)) {
                camadas.set(rowIndex, (Integer) aValue);
                fireTableCellUpdated(rowIndex, columnIndex);
            }
        }

    };

}
