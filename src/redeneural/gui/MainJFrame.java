package redeneural.gui;

import visualizacaoTridimensional.VisualizadorTridimensional;
import ij.plugin.IteradorDiretorio;
import redeneural.classificador.ClassificadorImagem;
import redeneural.mlp.Rede;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.AbstractTableModel;
import redeneural.classificador.CalculoVolume;
import redeneural.classificador.Status;
import redeneural.io.ValidacaoIO;
import redeneural.mlp.*;
import redeneural.mlp.funcao.*;
import redeneural.model.Classe;
import redeneural.model.Projeto;
import redeneural.util.FileUtil;
import redeneural.classificador.validacao.Metricas;
import redeneural.classificador.validacao.Validacao;

/**
 *
 * @author Michael Murussi
 */
public class MainJFrame extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(MainJFrame.class.getName());

    private Projeto projeto;
    private Backpropagation backpropagation;
    private final RedeJPanel redeJPanel = new RedeJPanel();
    private final AmostrasJPanel amostrasJPanel;
    private final ClassesJPanel classesJPanel;
    private final DelimitadorAreaPanel delimitadorAreaPanel;
    private Grafico grafico;
    private boolean isTreinando = false;
    private final JFileChooser fileChooser;
    private final JFileChooser fileChooserImage;
    private final JFileChooser fileChooserDiretorio;
    private final JFileChooser fileChooserDiretorioPoro;
    private final JFileChooser fileChooserProjeto;
    private Color corFundo;
    private boolean interromperClassificacao;

    // resultados da validação
    private Validacao validacao;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();

        this.btnPararTreino.setEnabled(false);

        this.projeto = new Projeto();
        this.amostrasJPanel = new AmostrasJPanel(projeto);
        this.classesJPanel = new ClassesJPanel(projeto);
        this.delimitadorAreaPanel = new DelimitadorAreaPanel(projeto);

        this.lblTreinamentoIteracoes.setText(null);
        this.lblTreinamentoEMQ.setText(null);

        this.jTabbedPane.insertTab("Rede", null, this.redeJPanel, null, 1);
        this.jTabbedPane.insertTab("Classes", null, this.classesJPanel, null, 2);
        this.jTabbedPane.insertTab("Amostras", null, this.amostrasJPanel, null, 3);
        this.jTabbedPane.insertTab("Delimitar Área", null, this.delimitadorAreaPanel, null, 7);
        
        this.jTabbedPane.setSelectedIndex(0);

        this.grafico = new Grafico();
        this.jPanelGrafico.add(grafico, BorderLayout.CENTER);

        this.fileChooser = FileChooserUtil.getNewFileChooser(
                FileChooserUtil.FILE_FILTER_XLS,
                FileChooserUtil.FILE_FILTER_XLSX,
                FileChooserUtil.FILE_FILTER_CSV
        );

        this.fileChooserImage = FileChooserUtil.getNewImageFileChooser();

        this.fileChooserDiretorio = new JFileChooser();
        this.fileChooserDiretorio.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        this.fileChooserDiretorioPoro = new JFileChooser();
        this.fileChooserDiretorioPoro.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        this.fileChooserProjeto = FileChooserUtil.getNewFileChooser(FileChooserUtil.FILE_FILTER_PROJETO);

        this.jTabbedPane.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (jTabbedPane.getSelectedComponent() instanceof UpdateContent) {
                    ((UpdateContent) jTabbedPane.getSelectedComponent()).updateContent();
                }
            }
        });

        tblMatrizConfusao.getTableHeader().setReorderingAllowed(false);

        setCorFundo(Color.black);
        setTempoClassificacao(0, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        panelProjeto = new javax.swing.JPanel();
        btnAbrirProjeto = new javax.swing.JButton();
        btnSalvarProjeto = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaInformacoes = new javax.swing.JTextArea();
        panelTreinamento = new javax.swing.JPanel();
        btnTreinar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTreinamentoIteracoes = new javax.swing.JLabel();
        lblTreinamentoEMQ = new javax.swing.JLabel();
        jPanelGrafico = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jLabel13 = new javax.swing.JLabel();
        edtLimiteIteracoes = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        edtLimiteErro = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        edtCoeficienteAprendizado = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        edtSementeAleatoria = new javax.swing.JSpinner();
        btnPararTreino = new javax.swing.JButton();
        panelValidacao = new javax.swing.JPanel();
        btnValidar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResultadoValidacao = new javax.swing.JTable();
        btnSalvarResultados = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMatrizConfusao = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblClassificacoesCorretas = new javax.swing.JLabel();
        lblClassificacoesIncorretas = new javax.swing.JLabel();
        lblClassificacoesIndeterminadas = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblKappa = new javax.swing.JLabel();
        lblClassificacoesCorretasPerc = new javax.swing.JLabel();
        lblClassificacoesIncorretasPerc = new javax.swing.JLabel();
        lblClassificacoesIndeterminadasPerc = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        edtParametroCorte = new javax.swing.JFormattedTextField();
        panelPesos = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaPesos = new javax.swing.JTextArea();
        panelClassificacao = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        edtImagemClassificar = new javax.swing.JTextField();
        btnSelecionarImagemClassificar = new javax.swing.JButton();
        btnClassificar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        edtSequenciaClassificar = new javax.swing.JTextField();
        btnSelecionarSequenciaClassificar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        edtDestinoClassificacao = new javax.swing.JTextField();
        btnSelecionarDestinoClassificacao = new javax.swing.JButton();
        btnClassificarSequencia = new javax.swing.JButton();
        progressBarClassificacao = new javax.swing.JProgressBar();
        jLabel17 = new javax.swing.JLabel();
        lblCorFundo = new javax.swing.JLabel();
        btnCorFundo = new javax.swing.JButton();
        chkMarcarFundo = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        lblClassificacaoInicio = new javax.swing.JLabel();
        lblClassificacaoFim = new javax.swing.JLabel();
        lblClassificacaoDuracao = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        btnClassificarSequenciaParar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        edtDestinoClassificacaoPoro = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        btnSelecionarDestinoClassificacao1 = new javax.swing.JButton();
        panelVolume = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        edtSequenciaVolume = new javax.swing.JTextField();
        btnSelecionarSequenciaVolume = new javax.swing.JButton();
        progressBarVolume = new javax.swing.JProgressBar();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaResultadosVolume = new javax.swing.JTextArea();
        btnCalcularVolume = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        edtVoxelSizeX = new javax.swing.JSpinner();
        edtVoxelSizeY = new javax.swing.JSpinner();
        edtVoxelSizeZ = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Classificador Neural");
        setMinimumSize(new java.awt.Dimension(400, 380));

        btnAbrirProjeto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/redeneural/gui/images/fileopen.png"))); // NOI18N
        btnAbrirProjeto.setText("Abrir Projeto");
        btnAbrirProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirProjetoActionPerformed(evt);
            }
        });

        btnSalvarProjeto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/redeneural/gui/images/filesave.png"))); // NOI18N
        btnSalvarProjeto.setText("Salvar Projeto");
        btnSalvarProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarProjetoActionPerformed(evt);
            }
        });

        textAreaInformacoes.setEditable(false);
        textAreaInformacoes.setColumns(20);
        textAreaInformacoes.setLineWrap(true);
        textAreaInformacoes.setRows(5);
        textAreaInformacoes.setText("PROJETO\n\nArmazena as definições das classes e da rede neural, incluindo os pesos sinápticos após treinamento.\n\nAs imagens e amostras não são armazenadas com o projeto.\n\nO projeto pode ser utilizado tanto para evitar retrabalho de configuração quanto para salvar uma rede neural já treinada para futura utilização.");
        textAreaInformacoes.setWrapStyleWord(true);
        jScrollPane5.setViewportView(textAreaInformacoes);

        javax.swing.GroupLayout panelProjetoLayout = new javax.swing.GroupLayout(panelProjeto);
        panelProjeto.setLayout(panelProjetoLayout);
        panelProjetoLayout.setHorizontalGroup(
            panelProjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProjetoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(panelProjetoLayout.createSequentialGroup()
                        .addComponent(btnAbrirProjeto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvarProjeto)
                        .addGap(0, 495, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelProjetoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAbrirProjeto, btnSalvarProjeto});

        panelProjetoLayout.setVerticalGroup(
            panelProjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProjetoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAbrirProjeto)
                    .addComponent(btnSalvarProjeto))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelProjetoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAbrirProjeto, btnSalvarProjeto});

        jTabbedPane.addTab("Projeto", panelProjeto);

        btnTreinar.setText("Treinar");
        btnTreinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTreinarActionPerformed(evt);
            }
        });

        jLabel2.setText("Iterações:");

        jLabel3.setText("EMQ:");

        lblTreinamentoIteracoes.setText("jLabel4");

        lblTreinamentoEMQ.setText("jLabel5");

        jPanelGrafico.setLayout(new java.awt.BorderLayout());

        jLabel13.setText("Limite de iterações");

        edtLimiteIteracoes.setModel(new javax.swing.SpinnerNumberModel(1000, 1, null, 1));

        jLabel14.setText("Limite erro (EMQ)");

        edtLimiteErro.setColumns(12);
        edtLimiteErro.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###0.000000000"))));
        edtLimiteErro.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edtLimiteErro.setValue(new Double(0.01));

        jLabel15.setText("Coeficiente de Aprendizado");

        edtCoeficienteAprendizado.setColumns(6);
        edtCoeficienteAprendizado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###0.000"))));
        edtCoeficienteAprendizado.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edtCoeficienteAprendizado.setValue(new Double(0.25));

        jLabel16.setText("Semente de inicialização dos pesos");

        edtSementeAleatoria.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        btnPararTreino.setText("Parar");
        btnPararTreino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPararTreinoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTreinamentoLayout = new javax.swing.GroupLayout(panelTreinamento);
        panelTreinamento.setLayout(panelTreinamentoLayout);
        panelTreinamentoLayout.setHorizontalGroup(
            panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTreinamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelTreinamentoLayout.createSequentialGroup()
                        .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTreinamentoLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTreinamentoIteracoes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTreinamentoEMQ))
                            .addGroup(panelTreinamentoLayout.createSequentialGroup()
                                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelTreinamentoLayout.createSequentialGroup()
                                        .addComponent(edtLimiteIteracoes, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(edtLimiteErro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelTreinamentoLayout.createSequentialGroup()
                                        .addComponent(edtCoeficienteAprendizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(edtSementeAleatoria, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 283, Short.MAX_VALUE))
                    .addGroup(panelTreinamentoLayout.createSequentialGroup()
                        .addComponent(btnTreinar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPararTreino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelTreinamentoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPararTreino, btnTreinar});

        panelTreinamentoLayout.setVerticalGroup(
            panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTreinamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(edtLimiteIteracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(edtLimiteErro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(edtCoeficienteAprendizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(edtSementeAleatoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnTreinar)
                        .addComponent(btnPararTreino)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTreinamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblTreinamentoIteracoes)
                    .addComponent(jLabel3)
                    .addComponent(lblTreinamentoEMQ))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelTreinamentoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnPararTreino, btnTreinar});

        jTabbedPane.addTab("Treinamento", panelTreinamento);

        btnValidar.setText("Validar");
        btnValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarActionPerformed(evt);
            }
        });

        tblResultadoValidacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblResultadoValidacao);

        btnSalvarResultados.setText("Salvar");
        btnSalvarResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnSalvarResultados)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSalvarResultados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tabela", jPanel4);

        tblMatrizConfusao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tblMatrizConfusao);

        jLabel4.setText("Instâncias corretamente classificadas:");

        jLabel5.setText("Instâncias incorretamente classificadas:");

        jLabel6.setText("Instâncias classificadas como indeterminadas:");

        lblClassificacoesCorretas.setText("0");

        lblClassificacoesIncorretas.setText("0");

        lblClassificacoesIndeterminadas.setText("0");

        jLabel9.setText("Estatística Kappa:");

        lblKappa.setText("0");

        lblClassificacoesCorretasPerc.setText("0%");

        lblClassificacoesIncorretasPerc.setText("0%");

        lblClassificacoesIndeterminadasPerc.setText("0%");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblClassificacoesIndeterminadas)
                                    .addComponent(lblClassificacoesIncorretas)
                                    .addComponent(lblClassificacoesCorretas))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblClassificacoesIndeterminadasPerc)
                                    .addComponent(lblClassificacoesIncorretasPerc)
                                    .addComponent(lblClassificacoesCorretasPerc)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(235, 235, 235)
                                .addComponent(lblKappa)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblClassificacoesCorretas)
                    .addComponent(lblClassificacoesCorretasPerc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblClassificacoesIncorretas)
                    .addComponent(lblClassificacoesIncorretasPerc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblClassificacoesIndeterminadas)
                    .addComponent(lblClassificacoesIndeterminadasPerc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lblKappa))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Matriz Confusão", jPanel5);

        jLabel7.setText("Classes - Parâmetro de Corte");

        edtParametroCorte.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        edtParametroCorte.setValue(new Double(0.5));

        javax.swing.GroupLayout panelValidacaoLayout = new javax.swing.GroupLayout(panelValidacao);
        panelValidacao.setLayout(panelValidacaoLayout);
        panelValidacaoLayout.setHorizontalGroup(
            panelValidacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValidacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelValidacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(panelValidacaoLayout.createSequentialGroup()
                        .addComponent(btnValidar)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtParametroCorte, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelValidacaoLayout.setVerticalGroup(
            panelValidacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValidacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelValidacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnValidar)
                    .addComponent(jLabel7)
                    .addComponent(edtParametroCorte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane.addTab("Validação", panelValidacao);

        jLabel1.setText("Pesos atuais:");

        jTextAreaPesos.setColumns(20);
        jTextAreaPesos.setRows(5);
        jScrollPane2.setViewportView(jTextAreaPesos);

        javax.swing.GroupLayout panelPesosLayout = new javax.swing.GroupLayout(panelPesos);
        panelPesos.setLayout(panelPesosLayout);
        panelPesosLayout.setHorizontalGroup(
            panelPesosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPesosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPesosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        panelPesosLayout.setVerticalGroup(
            panelPesosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPesosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Pesos", panelPesos);

        jLabel8.setText("Imagem a ser classificada");

        btnSelecionarImagemClassificar.setText("Selecionar");
        btnSelecionarImagemClassificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarImagemClassificarActionPerformed(evt);
            }
        });

        btnClassificar.setText("Classificar");
        btnClassificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClassificarActionPerformed(evt);
            }
        });

        jLabel10.setText("Classificar sequência de imagens");

        jLabel11.setText("Imagem da sequência");

        btnSelecionarSequenciaClassificar.setText("Selecionar");
        btnSelecionarSequenciaClassificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarSequenciaClassificarActionPerformed(evt);
            }
        });

        jLabel12.setText("Destino imagens classificadas");

        btnSelecionarDestinoClassificacao.setText("Selecionar");
        btnSelecionarDestinoClassificacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarDestinoClassificacaoActionPerformed(evt);
            }
        });

        btnClassificarSequencia.setText("Classificar");
        btnClassificarSequencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClassificarSequenciaActionPerformed(evt);
            }
        });

        jLabel17.setText("Cor");

        lblCorFundo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCorFundo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCorFundo.setText("Cor Fundo");
        lblCorFundo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCorFundo.setText("...");
        btnCorFundo.setToolTipText("Selecionar cor");
        btnCorFundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorFundoActionPerformed(evt);
            }
        });

        chkMarcarFundo.setText("Marcar fundo");

        jLabel18.setText("Início:");

        jLabel19.setText("Fim:");

        jLabel20.setText("Duração:");

        lblClassificacaoInicio.setText("00:00:00");

        lblClassificacaoFim.setText("00:00:00");

        lblClassificacaoDuracao.setText("0");

        jLabel21.setText("(seg)");

        btnClassificarSequenciaParar.setText("Parar");
        btnClassificarSequenciaParar.setEnabled(false);
        btnClassificarSequenciaParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClassificarSequenciaPararActionPerformed(evt);
            }
        });

        jButton1.setText("Visualização 3D");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizacao3DActionPerformed(evt);
            }
        });

        jButton2.setText("Visualização 3D de Poros");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizacao3DPorosActionPerformed(evt);
            }
        });

        jLabel26.setText("Destino imagens classificadas poros");

        btnSelecionarDestinoClassificacao1.setText("Selecionar");
        btnSelecionarDestinoClassificacao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarDestinoClassificacaoPoroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelClassificacaoLayout = new javax.swing.GroupLayout(panelClassificacao);
        panelClassificacao.setLayout(panelClassificacaoLayout);
        panelClassificacaoLayout.setHorizontalGroup(
            panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClassificacaoLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtImagemClassificar, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionarImagemClassificar))
                    .addComponent(progressBarClassificacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelClassificacaoLayout.createSequentialGroup()
                        .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(lblClassificacaoDuracao))
                            .addComponent(jLabel10)
                            .addComponent(btnClassificar)
                            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblClassificacaoInicio)
                                    .addComponent(lblClassificacaoFim)
                                    .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel21))))
                            .addComponent(chkMarcarFundo)
                            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCorFundo, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCorFundo))
                            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                .addComponent(btnClassificarSequencia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClassificarSequenciaParar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelClassificacaoLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edtDestinoClassificacao)
                                    .addComponent(edtSequenciaClassificar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSelecionarSequenciaClassificar, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSelecionarDestinoClassificacao, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                                .addComponent(edtDestinoClassificacaoPoro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelecionarDestinoClassificacao1)))))
                .addContainerGap())
        );

        panelClassificacaoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSelecionarDestinoClassificacao, btnSelecionarImagemClassificar, btnSelecionarSequenciaClassificar});

        panelClassificacaoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClassificar, btnClassificarSequencia, btnClassificarSequenciaParar});

        panelClassificacaoLayout.setVerticalGroup(
            panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClassificacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(edtImagemClassificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarImagemClassificar))
                .addGap(18, 18, 18)
                .addComponent(btnClassificar)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(edtSequenciaClassificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarSequenciaClassificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(edtDestinoClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarDestinoClassificacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edtDestinoClassificacaoPoro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarDestinoClassificacao1)
                    .addComponent(jLabel26))
                .addGap(17, 17, 17)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClassificarSequencia)
                    .addComponent(btnClassificarSequenciaParar)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(chkMarcarFundo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(btnCorFundo)
                    .addComponent(lblCorFundo))
                .addGap(18, 18, 18)
                .addComponent(progressBarClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(lblClassificacaoInicio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(lblClassificacaoFim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblClassificacaoDuracao)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        panelClassificacaoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCorFundo, lblCorFundo});

        panelClassificacaoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClassificar, btnClassificarSequencia, btnClassificarSequenciaParar});

        jTabbedPane.addTab("Classificação", panelClassificacao);

        jLabel22.setText("Imagem da sequência");

        btnSelecionarSequenciaVolume.setText("Selecionar");
        btnSelecionarSequenciaVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarSequenciaVolumeActionPerformed(evt);
            }
        });

        jLabel23.setText("Resultados");

        textAreaResultadosVolume.setColumns(20);
        textAreaResultadosVolume.setRows(5);
        jScrollPane4.setViewportView(textAreaResultadosVolume);

        btnCalcularVolume.setText("Calcular");
        btnCalcularVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularVolumeActionPerformed(evt);
            }
        });

        jLabel24.setText("Resolução");

        edtVoxelSizeX.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 0.1d));
        edtVoxelSizeX.setPreferredSize(new java.awt.Dimension(80, 20));

        edtVoxelSizeY.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 0.1d));
        edtVoxelSizeY.setPreferredSize(new java.awt.Dimension(80, 20));

        edtVoxelSizeZ.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 0.1d));
        edtVoxelSizeZ.setPreferredSize(new java.awt.Dimension(80, 20));

        jLabel25.setText("xyz µm");

        javax.swing.GroupLayout panelVolumeLayout = new javax.swing.GroupLayout(panelVolume);
        panelVolume.setLayout(panelVolumeLayout);
        panelVolumeLayout.setHorizontalGroup(
            panelVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVolumeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVolumeLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtSequenciaVolume, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionarSequenciaVolume))
                    .addComponent(jScrollPane4)
                    .addComponent(progressBarVolume, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelVolumeLayout.createSequentialGroup()
                        .addGroup(panelVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(btnCalcularVolume)
                            .addGroup(panelVolumeLayout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtVoxelSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtVoxelSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtVoxelSizeZ, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel25)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelVolumeLayout.setVerticalGroup(
            panelVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVolumeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(edtSequenciaVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarSequenciaVolume))
                .addGap(18, 18, 18)
                .addGroup(panelVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(edtVoxelSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtVoxelSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtVoxelSizeZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addComponent(btnCalcularVolume)
                .addGap(18, 18, 18)
                .addComponent(progressBarVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Volume", panelVolume);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
        );

        setSize(new java.awt.Dimension(796, 578));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTreinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTreinarActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            treinarRede();
        } catch (RuntimeException ex) {
            LOG.log(Level.SEVERE, "Erro durante treinamento", ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            isTreinando = false;
        } finally {
            setCursor(null);
        }
    }//GEN-LAST:event_btnTreinarActionPerformed

    private void btnValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarActionPerformed

        double parametroCorte = ((Number) edtParametroCorte.getValue()).doubleValue();

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            validarRede(parametroCorte);
        } catch (RuntimeException ex) {
            LOG.log(Level.SEVERE, "Erro durante validação", ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } finally {
            setCursor(null);
        }
    }//GEN-LAST:event_btnValidarActionPerformed

    private void btnSalvarResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarResultadosActionPerformed

        if (this.validacao == null) {
            JOptionPane.showMessageDialog(null, "Não existem dados a serem salvos.", "Informação", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (this.fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {

            File fileName = FileChooserUtil.getSelectedFileWithExtension(fileChooser);

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                ValidacaoIO.write(fileName, this.validacao);
            } catch (IOException | RuntimeException ex) {
                JOptionPane.showMessageDialog(null, ex.toString(), "Erro", JOptionPane.ERROR_MESSAGE);
            } finally {
                setCursor(null);
            }

        }
    }//GEN-LAST:event_btnSalvarResultadosActionPerformed

    private void btnSelecionarImagemClassificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarImagemClassificarActionPerformed

        if (fileChooserImage.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            edtImagemClassificar.setText(fileChooserImage.getSelectedFile().getAbsolutePath());
        }

    }//GEN-LAST:event_btnSelecionarImagemClassificarActionPerformed

    private void btnClassificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClassificarActionPerformed

        if (this.projeto.getRede() == null) {
            JOptionPane.showMessageDialog(null, "A rede ainda não foi treinada!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File imageIn = null;
        if (edtImagemClassificar.getText() != null && !edtImagemClassificar.getText().isEmpty()) {
            imageIn = new File(edtImagemClassificar.getText());
        }

        if (imageIn == null) {
            JOptionPane.showMessageDialog(null, "Falta informar o arquivo!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean marcarFundo = chkMarcarFundo.isSelected();

        String fileExt = FileUtil.getFileExtension(imageIn);
        String fileName = FileUtil.getFileNameWithoutExtension(imageIn) + "-classificada";
        if (fileExt != null && !fileExt.isEmpty()) {
            fileName = fileName + "." + fileExt;
        }
        File imageOut = new File(imageIn.getParentFile(), fileName);

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            long start = System.currentTimeMillis();
            setTempoClassificacao(start, 0);

            ClassificadorImagem classificador = new ClassificadorImagem(projeto, null, null, corFundo, marcarFundo);
            classificador.classifica(imageIn, imageOut);

            long stop = System.currentTimeMillis();
            setTempoClassificacao(start, stop);

        } catch (IOException | RuntimeException | CloneNotSupportedException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString(), "Erro", JOptionPane.ERROR_MESSAGE);
        } finally {
            setCursor(null);
        }

        JOptionPane.showMessageDialog(null, "Processo finalizado!");

    }//GEN-LAST:event_btnClassificarActionPerformed

    private void btnSelecionarSequenciaClassificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarSequenciaClassificarActionPerformed

        if (fileChooserImage.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            edtSequenciaClassificar.setText(fileChooserImage.getSelectedFile().getAbsolutePath());
        }

    }//GEN-LAST:event_btnSelecionarSequenciaClassificarActionPerformed

    private void btnSelecionarDestinoClassificacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarDestinoClassificacaoActionPerformed
        
        if (this.fileChooserDiretorio.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            edtDestinoClassificacao.setText(fileChooserDiretorio.getSelectedFile().getAbsolutePath());
        }

    }//GEN-LAST:event_btnSelecionarDestinoClassificacaoActionPerformed

    private void btnClassificarSequenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClassificarSequenciaActionPerformed

        if (this.projeto.getRede() == null) {
            JOptionPane.showMessageDialog(null, "A rede ainda não foi treinada!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File image = null;
        if (edtSequenciaClassificar.getText() != null && !edtSequenciaClassificar.getText().isEmpty()) {
            image = new File(edtSequenciaClassificar.getText());
        }
        final File destino;
        if (edtDestinoClassificacao.getText() != null && !edtDestinoClassificacao.getText().isEmpty()) {
            destino = new File(edtDestinoClassificacao.getText());
        } else {
            destino = null;
        }
        
        if (image == null) {
            JOptionPane.showMessageDialog(null, "Falta informar a sequência!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        if (!image.exists()) {
            JOptionPane.showMessageDialog(null, "O arquivo informado não existe!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        if (destino == null) {
            JOptionPane.showMessageDialog(null, "Falta informar o destino!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!destino.exists() || !destino.isDirectory()) {
            JOptionPane.showMessageDialog(null, "O destino informado não existe ou não é um diretório!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (destino.equals(image.getParentFile())) {
            JOptionPane.showMessageDialog(null, "O destino não pode ser a origem!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        edtSequenciaVolume.setText(edtSequenciaClassificar.getText());
        
        final String ext = FileUtil.getFileExtension(image);

        File dir = image.getParentFile();
        final File[] list = dir.listFiles(new java.io.FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return (ext != null) && ext.equalsIgnoreCase(FileUtil.getFileExtension(pathname));
            }
        });

        btnClassificarSequencia.setEnabled(false);
        btnClassificarSequenciaParar.setEnabled(true);
        this.interromperClassificacao = false;

        final boolean marcarFundo = chkMarcarFundo.isSelected();        
        
        // executa a classificação em paralelo, de acordo com o número de unidades de processameto disponíveis
        new Thread() {

            @Override
            public void run() {
                try {                    
                    progressBarClassificacao.setValue(0);
                    progressBarClassificacao.setMinimum(0);
                    progressBarClassificacao.setMaximum(100);

                    long start = System.currentTimeMillis();
                    setTempoClassificacao(start, 0);

                    ThreadPoolExecutor executor = (ThreadPoolExecutor)Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

                    for (File imageIn: list) {
                        File imageOut = new File(destino, imageIn.getName());

                        ClassificadorImagem classificador = new ClassificadorImagem(projeto, imageIn, imageOut, corFundo, marcarFundo);
                        executor.execute(classificador);
                    }
                    executor.shutdown();

                    // aguarda término
                    while (!executor.isTerminated() && !interromperClassificacao) {
                        executor.awaitTermination(1, TimeUnit.SECONDS);
                        int progress = Math.round((executor.getCompletedTaskCount() * 100) / executor.getTaskCount());
                        progressBarClassificacao.setValue(progress);
                    }

                    long stop = System.currentTimeMillis();
                    setTempoClassificacao(start, stop);

                } catch (CloneNotSupportedException | InterruptedException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, ex.toString(), "Erro", JOptionPane.ERROR_MESSAGE);
                } finally {
                    btnClassificarSequencia.setEnabled(true);
                    btnClassificarSequenciaParar.setEnabled(false);
                }

                JOptionPane.showMessageDialog(null, "Processo finalizado!");

            }

        }.start();

    }//GEN-LAST:event_btnClassificarSequenciaActionPerformed

    private void btnAbrirProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirProjetoActionPerformed
        if (this.fileChooserProjeto.showOpenDialog(this) ==  JFileChooser.APPROVE_OPTION) {
            File file = this.fileChooserProjeto.getSelectedFile();

            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
                Projeto p = (Projeto) ois.readObject();
                setProjeto(p);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAbrirProjetoActionPerformed

    private void btnSalvarProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarProjetoActionPerformed
        if (this.fileChooserProjeto.showSaveDialog(this) ==  JFileChooser.APPROVE_OPTION) {
            File file = FileChooserUtil.getSelectedFileWithExtension(this.fileChooserProjeto);

            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {
                oos.writeObject(this.projeto);
            } catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSalvarProjetoActionPerformed

    private void btnPararTreinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPararTreinoActionPerformed

        this.backpropagation.interromper();
        
    }//GEN-LAST:event_btnPararTreinoActionPerformed

    private void btnCorFundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorFundoActionPerformed

        Color c = JColorChooser.showDialog(this, "Selecionar cor", projeto.getCorIndeciso());
        if (c != null) {
            setCorFundo(c);
        }
    }//GEN-LAST:event_btnCorFundoActionPerformed

    private void btnClassificarSequenciaPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClassificarSequenciaPararActionPerformed

        this.interromperClassificacao = true;

    }//GEN-LAST:event_btnClassificarSequenciaPararActionPerformed

    private void btnSelecionarSequenciaVolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarSequenciaVolumeActionPerformed

        if (fileChooserImage.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            edtSequenciaVolume.setText(fileChooserImage.getSelectedFile().getAbsolutePath());
        }

    }//GEN-LAST:event_btnSelecionarSequenciaVolumeActionPerformed

    private void btnCalcularVolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularVolumeActionPerformed

        File image = null;
        if (edtSequenciaVolume.getText() != null && !edtSequenciaVolume.getText().isEmpty()) {
            image = new File(edtSequenciaVolume.getText());
        }
        
        if (image == null) {
            JOptionPane.showMessageDialog(null, "Falta informar a sequência!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!image.exists()) {
            JOptionPane.showMessageDialog(null, "O arquivo informado não existe!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        final double x = (Double) edtVoxelSizeX.getValue();
        final double y = (Double) edtVoxelSizeY.getValue();
        final double z = (Double) edtVoxelSizeZ.getValue();

        final String ext = FileUtil.getFileExtension(image);

        File dir = image.getParentFile();
        final File[] list = dir.listFiles(new java.io.FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return (ext != null) && ext.equalsIgnoreCase(FileUtil.getFileExtension(pathname));
            }
        });

        btnCalcularVolume.setEnabled(false);

        progressBarVolume.setMinimum(0);
        progressBarVolume.setValue(0);
        progressBarVolume.setMaximum(100);

        final int total = list.length;

        // calcula volume
        final CalculoVolume calculo = new CalculoVolume(projeto.getClasses(), list, x, y, z);
        calculo.setStatus(new Status() {

            @Override
            public void status(int pos) {
                int progress = Math.round(pos * 100) / total;
                progressBarVolume.setValue(progress);
            }

            @Override
            public void done(Exception ex) {
                btnCalcularVolume.setEnabled(true);

                // mostra resultados
                StringBuilder sb = new StringBuilder();

                if (ex != null) {
                    sb.append(ex);
                }

                for (CalculoVolume.Volume v: calculo.getVolumes()) {
                    sb.append(String.format("%s\tVoxels: %,d\tVolume: %,.3f (mm)\n", v.getClasse().getNome(), v.getVoxels(), v.getVolume()));
                }
                textAreaResultadosVolume.setText(sb.toString());
            }

        });
        
        new Thread(calculo).start();

    }//GEN-LAST:event_btnCalcularVolumeActionPerformed

    private void btnVisualizacao3DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizacao3DActionPerformed
        IteradorDiretorio fo = new IteradorDiretorio();
        fo.run(this.fileChooserDiretorio != null && this.fileChooserDiretorio.getSelectedFile() != null ? (this.fileChooserDiretorio.getSelectedFile().getAbsolutePath()): null);
        VisualizadorTridimensional vv = new VisualizadorTridimensional();
        vv.run(null);
    }//GEN-LAST:event_btnVisualizacao3DActionPerformed

    private void btnVisualizacao3DPorosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizacao3DPorosActionPerformed
        IteradorDiretorio fo = new IteradorDiretorio();
        fo.run(this.fileChooserDiretorioPoro != null && this.fileChooserDiretorioPoro.getSelectedFile() != null ? (this.fileChooserDiretorioPoro.getSelectedFile().getAbsolutePath()): null);
        VisualizadorTridimensional vv = new VisualizadorTridimensional();
        vv.run(null);
    }//GEN-LAST:event_btnVisualizacao3DPorosActionPerformed

    private void btnSelecionarDestinoClassificacaoPoroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarDestinoClassificacaoPoroActionPerformed
        if (this.fileChooserDiretorioPoro.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            edtDestinoClassificacaoPoro.setText(fileChooserDiretorioPoro.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnSelecionarDestinoClassificacaoPoroActionPerformed

    private void setProjeto(Projeto p) {
        this.projeto = p;
        atualizaPesos();
        redeJPanel.setProjeto(projeto);
        classesJPanel.setProjeto(projeto);
        amostrasJPanel.setProjeto(projeto);
        delimitadorAreaPanel.setProjeto(projeto);
    }

    private void setCorFundo(Color c) {
        lblCorFundo.setForeground(Color.white);
        lblCorFundo.setBackground(c);
        lblCorFundo.setOpaque(true);
        lblCorFundo.setText("#" + Integer.toHexString(c.getRGB()));
        if (this.corFundo == null || !this.corFundo.equals(c)) {
            this.corFundo = c;
        }
    }

    private void setTempoClassificacao(long start, long stop) {
        final DateFormat df = new SimpleDateFormat("HH:mm:ss");

        if (start > 0) {
            lblClassificacaoInicio.setText(df.format(new Date(start)));
        } else {
            lblClassificacaoInicio.setText(null);
        }
        if (stop > 0) {
            lblClassificacaoFim.setText(df.format(new Date(stop)));
        } else {
            lblClassificacaoFim.setText(null);
        }
        if (start > 0 && stop > 0) {
            long duracao = TimeUnit.MILLISECONDS.toSeconds(stop - start);
            lblClassificacaoDuracao.setText(String.valueOf(duracao));
        } else {
            lblClassificacaoDuracao.setText(null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirProjeto;
    private javax.swing.JButton btnCalcularVolume;
    private javax.swing.JButton btnClassificar;
    private javax.swing.JButton btnClassificarSequencia;
    private javax.swing.JButton btnClassificarSequenciaParar;
    private javax.swing.JButton btnCorFundo;
    private javax.swing.JButton btnPararTreino;
    private javax.swing.JButton btnSalvarProjeto;
    private javax.swing.JButton btnSalvarResultados;
    private javax.swing.JButton btnSelecionarDestinoClassificacao;
    private javax.swing.JButton btnSelecionarDestinoClassificacao1;
    private javax.swing.JButton btnSelecionarImagemClassificar;
    private javax.swing.JButton btnSelecionarSequenciaClassificar;
    private javax.swing.JButton btnSelecionarSequenciaVolume;
    private javax.swing.JButton btnTreinar;
    private javax.swing.JButton btnValidar;
    private javax.swing.JCheckBox chkMarcarFundo;
    private javax.swing.JFormattedTextField edtCoeficienteAprendizado;
    private javax.swing.JTextField edtDestinoClassificacao;
    private javax.swing.JTextField edtDestinoClassificacaoPoro;
    private javax.swing.JTextField edtImagemClassificar;
    private javax.swing.JFormattedTextField edtLimiteErro;
    private javax.swing.JSpinner edtLimiteIteracoes;
    private javax.swing.JFormattedTextField edtParametroCorte;
    private javax.swing.JSpinner edtSementeAleatoria;
    private javax.swing.JTextField edtSequenciaClassificar;
    private javax.swing.JTextField edtSequenciaVolume;
    private javax.swing.JSpinner edtVoxelSizeX;
    private javax.swing.JSpinner edtVoxelSizeY;
    private javax.swing.JSpinner edtVoxelSizeZ;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelGrafico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaPesos;
    private javax.swing.JLabel lblClassificacaoDuracao;
    private javax.swing.JLabel lblClassificacaoFim;
    private javax.swing.JLabel lblClassificacaoInicio;
    private javax.swing.JLabel lblClassificacoesCorretas;
    private javax.swing.JLabel lblClassificacoesCorretasPerc;
    private javax.swing.JLabel lblClassificacoesIncorretas;
    private javax.swing.JLabel lblClassificacoesIncorretasPerc;
    private javax.swing.JLabel lblClassificacoesIndeterminadas;
    private javax.swing.JLabel lblClassificacoesIndeterminadasPerc;
    private javax.swing.JLabel lblCorFundo;
    private javax.swing.JLabel lblKappa;
    private javax.swing.JLabel lblTreinamentoEMQ;
    private javax.swing.JLabel lblTreinamentoIteracoes;
    private javax.swing.JPanel panelClassificacao;
    private javax.swing.JPanel panelPesos;
    private javax.swing.JPanel panelProjeto;
    private javax.swing.JPanel panelTreinamento;
    private javax.swing.JPanel panelValidacao;
    private javax.swing.JPanel panelVolume;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JProgressBar progressBarClassificacao;
    private javax.swing.JProgressBar progressBarVolume;
    private javax.swing.JTable tblMatrizConfusao;
    private javax.swing.JTable tblResultadoValidacao;
    private javax.swing.JTextArea textAreaInformacoes;
    private javax.swing.JTextArea textAreaResultadosVolume;
    // End of variables declaration//GEN-END:variables

    private Rede getRedeConfigurada() {

        Funcao func;
        switch (this.redeJPanel.getFuncao()) {
            case 0:
                func = new FuncaoSigmoide();
                break;
            case 1:
                func = new FuncaoTangenteHiperbolica();
                break;
            default:
                throw new RuntimeException("Função não implementada");
        }

        int[] camadas = new int[this.redeJPanel.getCamadas().size()];
        int i = 0;
        for (Integer c : this.redeJPanel.getCamadas()) {
            if (c < 1) {
                throw new RuntimeException("Número de neurônios inválido na camada " + i);
            }
            camadas[i] = c;
            i++;
        }
        if (camadas.length < 2) {
            throw new RuntimeException("Número de camadas da rede inválido");
        }

        Rede r = new Rede(camadas, func);
        r.inicializaPesos(this.redeJPanel.getIntervaloInicial(), this.redeJPanel.getIntervaloFinal(), getSementeAletoria());

        return r;
    }

    private Backpropagation getBackpropagationConfigurado(Rede rede) {

        return new Backpropagation(rede, getCoeficienteAprendizado(), getLimiteIteracoes(), getLimiteErro());

    }

    private int getLimiteIteracoes() {
        return ((Number) edtLimiteIteracoes.getValue()).intValue();
    }

    private double getLimiteErro() {
        return ((Number) edtLimiteErro.getValue()).doubleValue();
    }

    private double getCoeficienteAprendizado() {
        return ((Number) edtCoeficienteAprendizado.getValue()).doubleValue();
    }

    private long getSementeAletoria() {
        return ((Number) edtSementeAleatoria.getValue()).longValue();
    }

    private double[][] getAmostrasTreinamento() {
        return this.amostrasJPanel.getAmostrasTreinamento();
    }

    private double[][] getAmostrasValidacao() {
        return this.amostrasJPanel.getAmostrasValidacao();
    }

    private AmostrasRede preparaAmostrasRede(double[][] amostras, Rede rede) {

        int numNeuroniosEntrada = rede.getCamadaEntrada().getNeuronios().length;
        int numNeuroniosSaida = rede.getCamadaSaida().getNeuronios().length;

        if (amostras == null || amostras.length == 0) {
            throw new RuntimeException("O conjunto de amostras está vazio.");
        }
        if (amostras[0].length != (numNeuroniosEntrada + numNeuroniosSaida)) {
            throw new RuntimeException("Amostra incompatível com o número de neurônios na camada de entrada e saída.");
        }

        double[][] entrada = new double[amostras.length][numNeuroniosEntrada];
        double[][] saida = new double[amostras.length][numNeuroniosSaida];
        for (int i = 0; i < amostras.length; i++) {
            for (int j = 0; j < amostras[i].length; j++) {
                if (j < numNeuroniosEntrada) {
                    entrada[i][j] = amostras[i][j];
                } else {
                    int k = j - numNeuroniosEntrada;
                    saida[i][k] = amostras[i][j];
                }
            }
        }

        return new AmostrasRede(entrada, saida);
    }

    private synchronized void treinarRede() {

        if (!isTreinando) {
            isTreinando = true;

            this.projeto.setRede(getRedeConfigurada());
            this.backpropagation = getBackpropagationConfigurado(this.projeto.getRede());
            this.backpropagation.setStatus(this.backpropagationStatus);

            AmostrasRede amostrasTreinamento = preparaAmostrasRede(getAmostrasTreinamento(), this.projeto.getRede());
            AmostrasRede amostrasValidacao = null;
            if (getAmostrasValidacao() != null && getAmostrasValidacao().length > 0) {
                amostrasValidacao = preparaAmostrasRede(getAmostrasValidacao(), this.projeto.getRede());
            }
            this.backpropagation.setAmostrasTreinamento(amostrasTreinamento);
            this.backpropagation.setAmostrasValidacao(amostrasValidacao);

            new Thread(this.backpropagation).start();
        }
    }

    private void validarRede(double parametroCorte) {

        if (this.projeto.getRede() == null) {
            throw new RuntimeException("A rede ainda não foi treinada.");
        }

        AmostrasRede amostrasRede = preparaAmostrasRede(getAmostrasValidacao(), this.projeto.getRede());

        validacao = new Validacao(this.projeto.getRede(), this.projeto.getClasses(), amostrasRede, parametroCorte);
        double[][] entrada = validacao.getAmostrasRede().getEntrada();
        double[][] saidaDesejada = validacao.getSaidaDesejada();
        double[][] saidaObtida = validacao.getSaidaObtida();

        tblResultadoValidacao.setModel(new ResultadoTableModel(entrada, saidaDesejada, saidaObtida));
        tblMatrizConfusao.setModel(new MatrizConfusaoTableModel(validacao.getMetricas()));
        lblClassificacoesCorretas.setText(String.valueOf(validacao.getMetricas().getClassificacoesCorretas()));
        lblClassificacoesCorretasPerc.setText(String.format("%4.2f%%", validacao.getMetricas().getClassificacoesCorretasPerc()));
        lblClassificacoesIncorretas.setText(String.valueOf(validacao.getMetricas().getClassificacoesIncorretas()));
        lblClassificacoesIncorretasPerc.setText(String.format("%4.2f%%", validacao.getMetricas().getClassificacoesIncorretasPerc()));
        lblClassificacoesIndeterminadas.setText(String.valueOf(validacao.getMetricas().getClassificacoesIndeterminadas()));
        lblClassificacoesIndeterminadasPerc.setText(String.format("%4.2f%%", validacao.getMetricas().getClassificacoesIndeterminadasPerc()));
        lblKappa.setText(String.format("%4.2f", validacao.getMetricas().getKappa()));
    }

    private void atualizaPesos() {
        if (this.projeto.getRede() == null) {
            jTextAreaPesos.setText("A rede ainda não foi treinada.");
        } else {
            StringBuilder sb = new StringBuilder();

            Camada[] camadas = this.projeto.getRede().getCamadas();
            for (int i = 1; i < camadas.length; i++) {
                sb.append(String.format("CAMADA %d\r\n", i));
                for (Neuronio n : camadas[i].getNeuronios()) {
                    for (double w : n.getPesos()) {
                        sb.append(String.format("%f\t", w));
                    }
                    sb.append("\r\n");
                }
            }

            jTextAreaPesos.setText(sb.toString());
        }
    }

    private final BackpropagationStatus backpropagationStatus = new BackpropagationStatus() {

        @Override
        public void start(int max) {
            lblTreinamentoIteracoes.setText(null);
            lblTreinamentoEMQ.setText(null);
            btnTreinar.setEnabled(false);
            btnPararTreino.setEnabled(true);
            grafico.limpa();

            progressBar.setValue(0);
            progressBar.setMaximum(max);
        }

        @Override
        public void status(int pos, double emqTreinamento, double emqValidacao) {
            progressBar.setValue(pos);
            grafico.addIteracao(pos, emqTreinamento, emqValidacao);
        }

        @Override
        public void done() {
            btnTreinar.setEnabled(true);
            btnPararTreino.setEnabled(false);
            lblTreinamentoIteracoes.setText(String.valueOf(backpropagation.getNumIteracoes()));
            lblTreinamentoEMQ.setText(String.format("%f", backpropagation.getErroMedioQuadrado()));
            isTreinando = false;
            atualizaPesos();
        }

        @Override
        public void error(String message) {
            JOptionPane.showMessageDialog(null, message, "Erro", JOptionPane.ERROR_MESSAGE);
        }
    };

    private class ResultadoTableModel extends AbstractTableModel {

        Class[] types = new Class[]{
            java.lang.Integer.class, java.lang.Double.class
        };

        private final double[][] entrada;
        private final double[][] saidaDesejada;
        private final double[][] saidaObtida;

        public ResultadoTableModel(double[][] entrada, double[][] saidaDesejada, double[][] saidaObtida) {
            this.entrada = entrada;
            this.saidaDesejada = saidaDesejada;
            this.saidaObtida = saidaObtida;
        }

        private int getNumColunasEntrada() {
            return (this.entrada != null && this.entrada.length > 0 ? this.entrada[0].length : 0);
        }

        private int getNumColunasSaida() {
            return (this.saidaDesejada != null && this.saidaDesejada.length > 0 ? this.saidaDesejada[0].length : 0);
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            return (columnIndex == 0 ? types[0] : types[1]);
        }

        @Override
        public String getColumnName(int column) {
            int colEntrada = getNumColunasEntrada() + 1;
            int colSaida = colEntrada + getNumColunasSaida();

            if (column == 0) {
                return "P";
            } else if (column < colEntrada) {
                return String.format("E%d", column - 1);
            } else if (column < colSaida) {
                return String.format("Y%d", column - colEntrada);
            } else {
                return String.format("O%d", column - colSaida);
            }
        }

        @Override
        public int getRowCount() {
            return (this.entrada != null ? this.entrada.length : 0);
        }

        @Override
        public int getColumnCount() {
            return getNumColunasEntrada() + 2 * getNumColunasSaida() + 1;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            int colEntrada = getNumColunasEntrada() + 1;
            int colSaida = colEntrada + getNumColunasSaida();

            if (columnIndex == 0) {
                return rowIndex;
            } else if (columnIndex < colEntrada) {
                return this.entrada[rowIndex][columnIndex - 1];
            } else if (columnIndex < colSaida) {
                return this.saidaDesejada[rowIndex][columnIndex - colEntrada];
            } else {
                return this.saidaObtida[rowIndex][columnIndex - colSaida];
            }
        }

    };

    private class MatrizConfusaoTableModel extends AbstractTableModel {

        Class[] types = new Class[]{
            java.lang.String.class, java.lang.Integer.class
        };

        private final Metricas metricas;
        private final Classe[] classes;

        public MatrizConfusaoTableModel(Metricas metricas) {
            this.metricas = metricas;
            this.classes = new Classe[metricas.getClasses().size()];
            for(Classe c: metricas.getClasses()) {
                this.classes[c.getNeuronio()] = c;
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            return (columnIndex == 0 ? types[0] : types[1]);
        }

        @Override
        public String getColumnName(int column) {
            if (column == 0) {
                return "";
            } else {
                if (column == metricas.getMatrizConfusao()[0].length) {
                    return "Indeterminado";
                } else {
                    return classes[column - 1].getNome();
                }
            }
        }

        @Override
        public int getRowCount() {
            return (metricas != null && metricas.getMatrizConfusao() != null ? metricas.getMatrizConfusao().length : 0);
        }

        @Override
        public int getColumnCount() {
            return (metricas.getMatrizConfusao() != null && metricas.getMatrizConfusao().length > 0 ? metricas.getMatrizConfusao()[0].length + 1 : 0);
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return classes[rowIndex].getNome();
            } else {
                int i = rowIndex;
                int j = columnIndex - 1;
                if (i < metricas.getMatrizConfusao().length && j < metricas.getMatrizConfusao()[i].length) {
                    return metricas.getMatrizConfusao()[i][j];
                } else {
                    return "";
                }
            }
        }

    }

}
