package redeneural.gui;

import java.awt.Cursor;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import redeneural.io.AmostrasIO;
import redeneural.model.Projeto;

/**
 *
 * @author Michael Murussi
 */
public class DelimitarAreaJPanel extends javax.swing.JPanel implements UpdateContent {

    private final DelimitarAreaPanel coletaAmostraPanel;
    private double[][] amostrasTreinamento;
    private double[][] amostrasValidacao;

    /**
     * Creates new form AmostrasJPanel
     * @param projeto
     */
    public DelimitarAreaJPanel(Projeto projeto) {
        initComponents();

        this.fileChooser = FileChooserUtil.getNewFileChooser(
                FileChooserUtil.FILE_FILTER_XLS,
                FileChooserUtil.FILE_FILTER_XLSX,
                FileChooserUtil.FILE_FILTER_CSV
        );

        this.coletaAmostraPanel = new DelimitarAreaPanel(projeto, this);
        jTabbedPane1.insertTab("Coleta", null, coletaAmostraPanel, null, 0);
        jTabbedPane1.setSelectedIndex(0);
    }

    public final void setProjeto(Projeto projeto) {
        this.coletaAmostraPanel.setProjeto(projeto);
    }

    public double[][] getAmostrasTreinamento() {
        return amostrasTreinamento;
    }

    public void setAmostrasTreinamento(double[][] amostrasTreinamento) {
        this.amostrasTreinamento = amostrasTreinamento;
        amostrasTreinamentoTableModel.fireTableStructureChanged();
        amostrasTreinamentoTableModel.fireTableDataChanged();
    }

    public double[][] getAmostrasValidacao() {
        return amostrasValidacao;
    }

    public void setAmostrasValidacao(double[][] amostrasValidacao) {
        this.amostrasValidacao = amostrasValidacao;
        amostrasValidacaoTableModel.fireTableStructureChanged();
        amostrasValidacaoTableModel.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private final JFileChooser fileChooser;

    private AmostrasTableModel amostrasTreinamentoTableModel = new AmostrasTableModel() {

        @Override
        protected double[][] getDados() {
            return amostrasTreinamento;
        }

    };

    private final AmostrasTableModel amostrasValidacaoTableModel = new AmostrasTableModel() {

        @Override
        protected double[][] getDados() {
            return amostrasValidacao;
        }

    };

    @Override
    public void updateContent() {
        this.coletaAmostraPanel.updateContent();
    }

    private abstract class AmostrasTableModel extends AbstractTableModel {

        Class[] types = new Class[]{
            java.lang.Integer.class, java.lang.Double.class
        };

        protected abstract double[][] getDados();

        @Override
        public Class getColumnClass(int columnIndex) {
            return (columnIndex == 0 ? types[0] : types[1]);
        }

        @Override
        public String getColumnName(int column) {
            return (column == 0 ? "P" : String.valueOf(column));
        }

        @Override
        public int getRowCount() {
            return (getDados() == null ? 0 : getDados().length);
        }

        @Override
        public int getColumnCount() {
            return (getDados() != null && getDados().length > 0 ? getDados()[0].length + 1 : 0);
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return rowIndex;
            } else {
                return getDados()[rowIndex][columnIndex - 1];
            }
        }

    };

}
